package mainPanel;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.io.FileInputStream;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;

import controls.KeyboardInputs;
import controls.MouseInputs;
import controls.MouseMovements;
import controls.MouseWheelInputs;
import entities.Player;
import game.Game;
import hitboxes.FloorCheck;
import room.CreateRoomFloor;
import weapon.Gun1;
import weapon.Gun2;
import weapon.Gun3;
import weapon.Projectiles;
import weapon.RangedWeapons;
import weapon.Weapons;

public class GamePanel extends JPanel implements Runnable{
	private BufferedImage blankCursor, temp;
	private int screenWidth, screenHeight, tileSize;
	private double scale = 1;
	private Thread gameThread;
	private JFrame mainFrame;
	
	private KeyboardInputs KeyI;
	private MouseInputs MouseI;
	private MouseMovements MouseM;
	private MouseWheelInputs MouseW;
	
	private Player P1;
	private Camera mainCams;
	private SimulatedMouse SimulM;
	private CreateRoomFloor CreateR;
	private int Length, Height;
	
	private int FPS = 60;
	
	private BufferedImage pauseBg=null;
	
	private Game runGame;
	
	private int gameState = 0;

	public GamePanel(JFrame _mainFrame) {
		this.mainFrame = _mainFrame;
		
		//Declare window size
		screenWidth=(int)(1280*scale);
		screenHeight=(int)(720*scale);
		tileSize=(int)(64*scale);
		this.setPreferredSize(new Dimension(screenWidth, screenHeight));
		
		//Sets settings
		this.setFocusable(true);
		this.setDoubleBuffered(true);
		this.setBackground(Color.DARK_GRAY);
		
		//declare controls
		this.KeyI = new KeyboardInputs();
		this.MouseI = new MouseInputs();
		this.MouseM = new MouseMovements();
		this.MouseW = new MouseWheelInputs(this);
		
		//add controls listener
		this.addKeyListener(KeyI);
		this.addMouseListener(MouseI);
		this.addMouseMotionListener(MouseM);
		this.addMouseWheelListener(MouseW);
		
		//Miscellaneous
		
		try {
			pauseBg = ImageIO.read(getClass().getResourceAsStream("/background/PauseBackground.png"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
//		runGame = new Game();
	}
	
	public Game getGame() {
		return runGame;
	}
	
	public int getWidth() {
		return screenWidth;
	}
	
	public int getHeight() {
		return screenHeight;
	}
	
	public int getTileSize() {
		return tileSize;
	}
	
	public void startGameThread() {
		gameThread = new Thread(this);
		gameThread.start();
	}
	
	@Override
	public void run() {
		double drawSpeed = 1000000000/FPS;
		double delta=0;
		
		long prevTime = System.nanoTime();
		long newTime = System.nanoTime();
		
		while(gameThread!=null) {
			newTime = System.nanoTime();
			delta += (newTime-prevTime)/drawSpeed;
			prevTime = newTime;
			
			if(delta>=1) {
				runGame.update();
				repaint();
//				System.out.println(delta);
				delta--;
			}
		}
		
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		Graphics2D g2 = (Graphics2D)g;
		g2.drawImage(temp, 0-mainCams.getCamX(), 0-mainCams.getCamY(), tileSize, tileSize, null);
		
		g2.drawImage(tempRoom, -mainCams.getCamX(), -mainCams.getCamY(), Length*tileSize, Height*tileSize, null);
		g2.drawLine(SimulM.getSMouseX(), SimulM.getSMouseY(), P1.getWorldX()-mainCams.getCamX(), P1.getWorldY()-mainCams.getCamY());
		
		if(heldWeapon instanceof RangedWeapons) {
			for(Projectiles element : ((RangedWeapons) heldWeapon).getShots()) {
				element.draw(g2);
			}
		}
		P1.draw(g2);
		
		if(gameState==1) {
			g2.drawImage(pauseBg, 0, 0, screenWidth, screenHeight, null);
		}
		
		SimulM.draw(g2);
		
//		g2.drawImage(testArt, 0, 0, 64, 32, 0, 0, 16, 8, null); //Partial drawing
		//Split object / wall map into 2 : above player and below player, depending on players position
		
		g2.dispose();
	}
	
}

//Movement controls, pause menu, change controls, auto hold
