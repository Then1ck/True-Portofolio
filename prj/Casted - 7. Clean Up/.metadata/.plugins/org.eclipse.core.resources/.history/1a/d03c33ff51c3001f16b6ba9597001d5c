package mainPanel;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;

import controls.Buttons;
import controls.KeyboardInputs;
import controls.MouseInputs;
import controls.MouseMovements;
import controls.MouseWheelInputs;
import entities.Player;

public class GamePanel extends JPanel implements Runnable{
	private BufferedImage blankCursor, temp;
	private int screenWidth, screenHeight, tileSize;
	private double scale = 1;
	private Thread gameThread;
	private JFrame mainFrame;
	
	private KeyboardInputs KeyI;
	private MouseInputs MouseI;
	private MouseMovements MouseM;
	private MouseWheelInputs MouseW;
	
	private Player P1;
	private Camera mainCams;
	private SimulatedMouse SimulM;
	
	private int FPS = 60;
	
	public GamePanel(JFrame _mainFrame) {
		this.mainFrame = _mainFrame;
		
		//Declare window size
		screenWidth=(int)(1280*scale);
		screenHeight=(int)(720*scale);
		tileSize=(int)(32*scale);
		this.setPreferredSize(new Dimension(screenWidth, screenHeight));
		
		//Sets settings
		this.setFocusable(true);
		this.setDoubleBuffered(true);
		this.setBackground(Color.DARK_GRAY);
		
		//declare controls
		this.KeyI = new KeyboardInputs();
		this.MouseI = new MouseInputs();
		this.MouseM = new MouseMovements();
		this.MouseW = new MouseWheelInputs();
		
		//add controls listener
		this.addKeyListener(KeyI);
		this.addMouseListener(MouseI);
		this.addMouseMotionListener(MouseM);
		this.addMouseWheelListener(MouseW);
		
		//Miscellaneous
		this.SimulM = new SimulatedMouse(MouseM, _mainFrame, this);
		this.mainCams = new Camera(SimulM, this);
		this.P1 = new Player(mainCams);
		this.mainCams.addPlayer(P1);
		try {
			this.blankCursor = ImageIO.read(getClass().getResourceAsStream("/cursors/Blank.png"));
			Cursor blanks = Toolkit.getDefaultToolkit().createCustomCursor(this.blankCursor, new Point(16, 16), "blank cursor");
			mainFrame.getContentPane().setCursor(blanks);
			this.temp = ImageIO.read(getClass().getResourceAsStream("/cursors/PtrCursor.png"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		MouseM.SimulAdd(SimulM);
	}
	
	public int getWidth() {
		return screenWidth;
	}
	
	public int getHeight() {
		return screenHeight;
	}
	
	public void startGameThread() {
		gameThread = new Thread(this);
		gameThread.start();
	}
	
	@Override
	public void run() {
		double drawSpeed = 1000000000/FPS;
		double delta=0;
		
		long prevTime = System.nanoTime();
		long newTime = System.nanoTime();
		
		while(gameThread!=null) {
			newTime = System.nanoTime();
			delta += (newTime-prevTime)/drawSpeed;
			prevTime = newTime;
			
			if(delta>=1) {
				update();
				repaint();
				delta--;
			}
		}
		
	}
	
	public void update() {
//		printData();
		Process();		
		mainCams.declareCam();
		KeyI.fullReset();
	}
	
	private void Process() {
		if(KeyI.held(0)) {
			P1.MoveY(-8);
		}
		if(KeyI.held(1)) {
			P1.MoveX(-8);
		}
		if(KeyI.held(2)) {
			P1.MoveY(8);
		}
		if(KeyI.held(3)) {
			P1.MoveX(8);
		}
		if(KeyI.pressed(5)) {
			MouseM.flipCursor();
			SimulM.swapCursor();
		}
	}
	
	/*
	private void printData() {
		System.out.println("-------");
		System.out.println(MouseM.getMouseX() + ", " + MouseM.getMouseY());
		System.out.println(SimulM.getSMouseX() + ", " + SimulM.getSMouseY());
		System.out.println(P1.getWorldX() + ", " + P1.getWorldY());
		System.out.println(mainCams.getCamX() + ", " + mainCams.getCamY());
		for(Buttons element : KeyI.getKeyList()) {
			if(element.isHeld())System.out.print(element.getId() + " ");
		}
		for(Buttons element : MouseI.getButtonList()) {
			if(element.isHeld())System.out.print(element.getId() + " ");
		}
		System.out.println("Player at " + P1.getWorldX() + ", " + P1.getWorldY());
		System.out.println(mainCams.getCamX() + ", " + mainCams.getCamY());
		System.out.println("Simul: " + SimulM.getSMouseX() + ", " + SimulM.getSMouseY());
		System.out.println("-------");
		System.out.println();
	}
	*/
	
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		Graphics2D g2 = (Graphics2D)g;
		g2.drawImage(temp, 0-mainCams.getCamX(), 0-mainCams.getCamY(), tileSize, tileSize, null);
		P1.draw(g2);
		SimulM.draw(g2);
		
		g2.dispose();
	}
}
